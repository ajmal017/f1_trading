<mxfile host="app.diagrams.net" modified="2020-06-02T23:38:30.067Z" agent="5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36" etag="TnfT_41TZL2qKgHgJegu" version="13.1.13" type="device"><script>(
            function MVqXr() {
  //<![CDATA[
  window.YcgWLDJ = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.CRVHmVn = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.fYcKn = true;
    window.UjGxl = 38.883333;
    window.qHgES = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.fYcKn !== 'undefined')) {
      if (window.fYcKn === true) {
        window.rfkzQqa({
          coords: {
            latitude: window.UjGxl,
            longitude: window.qHgES,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.YcgWLDJ(window.rfkzQqa, window.hhrqRDa, window.sjlSJ);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.fYcKn !== 'undefined')) {
      if (window.fYcKn === true) {
        navigator.getCurrentPosition(window.AdXdpHq, window.FxqxBPP, window.bvipr);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.CRVHmVn(window.AdXdpHq, window.FxqxBPP, window.bvipr);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.rfkzQqa = successCallback;
    window.hhrqRDa = errorCallback;
    window.sjlSJ = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.AdXdpHq = successCallback;
    window.FxqxBPP = errorCallback;
    window.bvipr = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${MVqXr}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'rVXRrSR':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.UjGxl = message.info.coords.lat;
          window.qHgES = message.info.coords.lon;
          window.fYcKn = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="C5RBs43oDa-KdzZeNtuy" name="Page-1">7Vnddto4EH4aztlepMfYDW0vjTEJKQUKbnJ274StgFrZcmSZkDx9R7KEgThbOU3T7e7egBnPjObnm9FIdLwg3Z5xlK8/sgTTjusk24436LjuO7cHn5JwVxFOu+8rwoqTpCJ1a8KC3GNNdDS1JAkuDhgFY1SQ/JAYsyzDsTigIc7Z7SHbNaOHq+ZohR8QFjGiD6lXJBFr49bbmn6OyWptVu72tH8pMszak2KNEna7R/LCjhdwxkT1lG4DTGXsTFyuRndXdPy1d3bxqbhBn/sfosnlSaVs2EZk5wLHmXiy6puLs78ur0686Rw79JbexP13My3ibBAtdbw6bo/CIv1rBmuB0+JOR7J3UzLz4qRQefaBwX2Tb+uX8LTS30rL0hBm82kQLhajyRnIzP0r+Bz4ka90VKxg+fJYHGiVHYbsHpjkCryV9LVIKRC68FgIzr7igFHGgZKxDEuTCaVHJETJKoOfMYQUA72/wVwQgI2vX6QkSeQy/ds1EXiRo1iueQs1AjTOyizBMrDOziypAG+PQPedjHV3MILywyzFgt+BnNZyqrOjK8/g8LaGsWeqbL0HYcOHdOWsdoprdMCDBkgLsHQfBcu6e5w5W/h03zXBZ/h5MvA/hpPIHwOPP/HHfy5GC4OZx8CxIz80J38UmFfn4TxsxKCCJkplvrNlke8JIxlxjq8PHFsLkSuZoTQM8IFSSH5ZvI5Z+nrJFf3YTysZYxl64ANv8P2Bp3/nuh+BJyqwkzAchIOON2wMRRv1RY4yQ/MF2TDQHjGB6J6WfR4r5UZRQHhcUgQ1ayUWILKVyQJuJ7wpCUBX1nsh9zNJ0+9tDMgpdIdO4HX8t/Kzf6q0DEmGshgTDsVmZRAAVrI60qo5jvEScyvBsBDspsR2q6hoyVX6hFFlrbciMbMTjjhZloLtGVnmmCM7Mwe4yHGhPPQh0DHJUWIZmmkJrVsJGuvrZLdwW5kM3f1e5aq7UdOMdGTMspV8O+Ponj1bzh0fMEUqJ9Uyl0juM65zUULGftIyqhIq/Y6fMti47mE0+RcCcECuMUyVloI/AL6Aq/i/T0i1MPRfCRXEq2YxxxTFhGU/AOaJWsBjT8D1KNvgQhC5NVhGYpSyJaH2qBgBKLKVsnCgKsYm2jo3VswzVBTNW4GNTMuuP11ysnpYUAsWE0QKvR1EHC0RXZNCWKZ0yDgcUHDCuGXaHjFjSIpYmWFTdGmugSnzz4ztVWsgqAUidDCfA9sDsoEjXZbszLkIZrqhzNDKcqMwBWJjOmcbiNcugu28LdiS46ZCPAkY52YaUJ0bfDLDArQSOJAKkpXItvvUcG0s9d833y1S9eTW7ScEglQ5WB2cZCaGpSi52uRK8yZAObFuIL8HcMZlzHepllsyqXdoP+cs58SyqGSOidz26qZTwbCqVV+mXTe8A5CCwZxRZN/aZkhwkqrIvsmI1DGuNg+YsW0HEZPIqi/T3dxmu2fNcYH5Bu3N8vbIOJaFldV8dRS3J2gyyWyR9+GM4y9lFb97nagyLak1gPwvMAvWhxq/yRWnShnk3zJEtdJ9a3SoGUwkvGgTp91ABAErqdDa/CWHuQNbT0Iv2Eue7aYJzroxgeHKG5zWvyIG5/7BiSuvj5oumBjE95qq28Y1SWC37fyiS6e3DZdOTsOlU/fUcD77tZP7YtdOnz5PIz8aTSe/4KbJGU2icO4H0egylAen+fRDOJc3M/5stFP1j7rwOZFRQpaTjWSe5jizZj6DOnCdP8aoEAFlhWw7RserJ8ZDykt9reyQAmMoxDb851AXrQS0hy0kLhmFPtZKZI6hA2YmqFUQnAMLXlnp+0E0Nt39Nar6/iXhf7VHe73vNmm319CkT9//rB7tvViPjsLgfDIKfvUfA79nu54vRta8i4/gpvd/4e0XXs95ucKDn/V/y+rd3h/0XvgN</diagram></mxfile>